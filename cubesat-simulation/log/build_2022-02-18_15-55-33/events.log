[0.000000] (-) TimerEvent: {}
[0.000811] (-) JobUnselected: {'identifier': 'cubesat_actuators'}
[0.000979] (-) JobUnselected: {'identifier': 'cubesat_controllers'}
[0.001018] (-) JobUnselected: {'identifier': 'cubesat_description'}
[0.003394] (-) JobUnselected: {'identifier': 'cubesat_gazebo'}
[0.003521] (-) JobUnselected: {'identifier': 'smartdata_test'}
[0.003568] (cubesat_sensors) JobQueued: {'identifier': 'cubesat_sensors', 'dependencies': OrderedDict()}
[0.003617] (cubesat_sensors) JobStarted: {'identifier': 'cubesat_sensors'}
[0.063418] (cubesat_sensors) JobProgress: {'identifier': 'cubesat_sensors', 'progress': 'cmake'}
[0.064690] (cubesat_sensors) JobProgress: {'identifier': 'cubesat_sensors', 'progress': 'build'}
[0.065916] (cubesat_sensors) Command: {'cmd': ['/usr/local/bin/cmake', '--build', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_sensors', '--', '-j8', '-l8'], 'cwd': '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_sensors', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'matheuswagner'), ('LANGUAGE', 'en'), ('LC_TIME', 'pt_BR.UTF-8'), ('TEXTDOMAIN', 'im-config'), ('OSPL_INFOFILE', '<stdout>'), ('XDG_SEAT', 'seat0'), ('SSH_AGENT_PID', '4234'), ('XDG_SESSION_TYPE', 'x11'), ('GIT_ASKPASS', '/snap/code/88/usr/share/code/resources/app/extensions/git/dist/askpass.sh'), ('LD_LIBRARY_PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/opt/yaml_cpp_vendor/lib:/home/matheuswagner/ros2_dashing/ros2-linux/opt/rviz_ogre_vendor/lib:/usr/lib:/home/matheuswagner/ros2_dashing/ros2-linux/lib:/usr/lib/x86_64-linux-gnu/gazebo-9/plugins:/opt/ros/dashing/opt/yaml_cpp_vendor/lib:/opt/rti.com/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0:/opt/ros/dashing/lib:/home/matheuswagner/Downloads/omnetpp-4.6-src/omnetpp-4.6/lib'), ('SHLVL', '1'), ('OLDPWD', '/home/matheuswagner/repos/adaptive-cubesat-adcs'), ('CHROME_DESKTOP', 'code-url-handler.desktop'), ('OSPL_URI', 'file:///home/matheuswagner/ros2_dashing/ros2-linux/share/opensplice_cmake_module/config/ros_ospl.xml'), ('QT4_IM_MODULE', 'xim'), ('HOME', '/home/matheuswagner'), ('DESKTOP_SESSION', 'ubuntu'), ('TERM_PROGRAM_VERSION', '1.64.2'), ('GIO_LAUNCHED_DESKTOP_FILE', '/var/lib/snapd/desktop/applications/code_code.desktop'), ('OSPL_VERBOSITY', '2'), ('NDDSHOME', '/opt/rti.com/rti_connext_dds-5.3.1'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL', 'true'), ('GTK_MODULES', 'gail:atk-bridge'), ('VSCODE_GIT_ASKPASS_MAIN', '/snap/code/88/usr/share/code/resources/app/extensions/git/dist/askpass-main.js'), ('ROS_PYTHON_VERSION', '3'), ('LC_MONETARY', 'pt_BR.UTF-8'), ('LC_CTYPE', 'pt_BR.UTF-8'), ('VSCODE_GIT_ASKPASS_NODE', '/snap/code/88/usr/share/code/code'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('OSPL_TMPL_PATH', '/usr/etc/opensplice/idlpp'), ('COLORTERM', 'truecolor'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5791'), ('MANDATORY_PATH', '/usr/share/gconf/ubuntu.mandatory.path'), ('COLCON_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install:/home/matheuswagner/ros2_dashing/ros2-linux'), ('IM_CONFIG_PHASE', '2'), ('ROS_DISTRO', 'dashing'), ('LOGNAME', 'matheuswagner'), ('GTK_IM_MODULE', 'ibus'), ('_', '/home/matheuswagner/.local/bin/colcon'), ('DEFAULTS_PATH', '/usr/share/gconf/ubuntu.default.path'), ('ROS_VERSION', '2'), ('PKG_CONFIG_PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/lib/x86_64-linux-gnu/pkgconfig:/home/matheuswagner/ros2_dashing/ros2-linux/lib/pkgconfig'), ('USERNAME', 'matheuswagner'), ('XDG_SESSION_ID', '2'), ('TERM', 'xterm-256color'), ('OSPL_ERRORFILE', '<stderr>'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('WINDOWPATH', '2'), ('PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/bin:/opt/rti.com/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0:/opt/rti.com/rti_connext_dds-5.3.1/bin:/opt/ros/dashing/bin:/home/matheuswagner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/matheuswagner/Downloads/omnetpp-4.6-src/omnetpp-4.6/bin'), ('PAPERSIZE', 'a4'), ('SESSION_MANAGER', 'local/matheuswagner-Inspiron-7572:@/tmp/.ICE-unix/4156,unix/matheuswagner-Inspiron-7572:/tmp/.ICE-unix/4156'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'pt_BR.UTF-8'), ('BAMF_DESKTOP_FILE_HINT', '/var/lib/snapd/desktop/applications/code_code.desktop'), ('GDK_BACKEND', 'x11'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('OSPL_HOME', '/usr'), ('XDG_CURRENT_DESKTOP', 'Unity'), ('LC_TELEPHONE', 'pt_BR.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('TERM_PROGRAM', 'vscode'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XMODIFIERS', '@im=ibus'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-c7856e65b5.sock'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('AMENT_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/smartdata_test:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_gazebo:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_controller:/home/matheuswagner/ros2_dashing/ros2-linux:/opt/ros/dashing'), ('ORIGINAL_XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('GSETTINGS_SCHEMA_DIR', '/snap/code/88/usr/share/glib-2.0/schemas'), ('DISABLE_WAYLAND', '1'), ('LC_NAME', 'pt_BR.UTF-8'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'pt_BR.UTF-8'), ('TEXTDOMAINDIR', '/usr/share/locale/'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('LC_IDENTIFICATION', 'pt_BR.UTF-8'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', '--ms-enable-electron-run-as-node'), ('XDG_VTNR', '2'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_sensors'), ('CLUTTER_IM_MODULE', 'xim'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('LC_NUMERIC', 'pt_BR.UTF-8'), ('PYTHONPATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description/lib/python3.6/site-packages:/home/matheuswagner/ros2_dashing/ros2-linux/lib/python3.6/site-packages:/opt/ros/dashing/lib/python3.6/site-packages'), ('LC_PAPER', 'pt_BR.UTF-8'), ('BREAKPAD_DUMP_LOCATION', '/home/matheuswagner/.config/Code/exthost Crash Reports'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/smartdata_test:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_gazebo:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_controller:/home/matheuswagner/ros2_dashing/ros2-linux:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description:/opt/ros/dashing')]), 'shell': False}
[0.097172] (cubesat_sensors) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/imu_adapter.dir/src/imu_adapter.cpp.o\x1b[0m\n'}
[0.100000] (-) TimerEvent: {}
[0.200292] (-) TimerEvent: {}
[0.300621] (-) TimerEvent: {}
[0.400987] (-) TimerEvent: {}
[0.501382] (-) TimerEvent: {}
[0.601808] (-) TimerEvent: {}
[0.702129] (-) TimerEvent: {}
[0.802447] (-) TimerEvent: {}
[0.902758] (-) TimerEvent: {}
[1.003091] (-) TimerEvent: {}
[1.103394] (-) TimerEvent: {}
[1.203703] (-) TimerEvent: {}
[1.263849] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::ImuAdapter()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.264634] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:21:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.265995] (cubesat_sensors) StderrLine: {'line': b'       subcription = this->create_subscription<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>(\n'}
[1.266399] (cubesat_sensors) StderrLine: {'line': b'                                                              \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.266523] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:21:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.266650] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:22:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K_1\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[1.266761] (cubesat_sensors) StderrLine: {'line': b'       "imu_plugin/out", 10, std::bind(&ImuAdapter::AtMessageArival, this, \x1b[01;31m\x1b[K_1\x1b[m\x1b[K));\n'}
[1.266921] (cubesat_sensors) StderrLine: {'line': b'                                                                           \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.267043] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:22:75:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Ksuggested alternative:\n'}
[1.267160] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:2:0\x1b[m\x1b[K:\n'}
[1.267283] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/functional:275:34:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::placeholders::_1\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.267439] (cubesat_sensors) StderrLine: {'line': b'     extern const _Placeholder<1> \x1b[01;36m\x1b[K_1\x1b[m\x1b[K;\n'}
[1.267554] (cubesat_sensors) StderrLine: {'line': b'                                  \x1b[01;36m\x1b[K^~\x1b[m\x1b[K\n'}
[1.267668] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.267862] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_velocity_x", 10);\n'}
[1.268135] (cubesat_sensors) StderrLine: {'line': b'                                                                  \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.268366] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.268514] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [15], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.268663] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.268795] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.268928] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.269059] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.269189] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.269328] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.269479] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.269615] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.269754] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.269891] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.270031] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.270190] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.270337] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.270473] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.270625] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.270771] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.270902] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.271034] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.271176] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.271326] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.271480] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.271635] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.271776] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.271935] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.272068] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.272219] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.272385] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.272531] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.272698] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.272837] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.272969] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.273113] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.273246] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.273380] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.273555] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.273691] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.273829] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_velocity_y", 10);\n'}
[1.273992] (cubesat_sensors) StderrLine: {'line': b'                                                                  \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.274125] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.274251] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [15], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.274374] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.274459] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.274544] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.274628] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.274717] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.274805] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.274892] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.275014] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.275108] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.275195] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.275297] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.275398] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.275493] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.275580] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.275668] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.275762] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.275850] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.275939] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.276030] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.276117] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.276204] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.276292] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.276384] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.276775] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.277138] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.277252] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.277358] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.277463] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.277571] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.277686] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.277799] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.277906] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.278027] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.278142] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.278234] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.278324] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.278415] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_velocity_z", 10);\n'}
[1.278505] (cubesat_sensors) StderrLine: {'line': b'                                                                  \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.278593] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.278683] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [15], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.278775] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.278864] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.278952] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.279041] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.279129] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.279217] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.279319] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.279414] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.279507] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.279595] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.279688] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.279777] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.279864] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.279952] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.280039] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.280127] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.280215] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.280303] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.280400] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.280488] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.280589] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.280731] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.280859] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.280953] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.281043] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.281130] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.281219] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.281309] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.281411] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.281505] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.281594] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.281679] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.281765] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.281852] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.281936] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.282018] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.282106] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_o", 10);\n'}
[1.282196] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.282282] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.282370] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.282458] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.282544] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.282634] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.282736] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.282838] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.282965] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.283068] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.283184] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.283374] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.283562] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.283741] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.283914] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.284087] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.284267] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.284371] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.284461] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.284554] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.284640] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.284782] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.284876] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.284962] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.285047] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.285131] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.285215] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.285312] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.285396] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.285483] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.285565] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.285651] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.285741] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.285824] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.285907] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.285992] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.286075] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.286157] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.286238] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.286324] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_x", 10);\n'}
[1.286406] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.286496] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.286580] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.286666] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.286748] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.286830] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.286911] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.286994] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.287077] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.287164] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.287251] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.287350] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.287433] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.287515] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.287602] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.287685] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.287766] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.287848] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.287929] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.288012] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.288094] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.288177] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.288257] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.288339] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.288420] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.288503] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.288584] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.288667] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.288749] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.288886] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.288980] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.289069] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.289155] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.289238] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.289321] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.289403] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.289485] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.289568] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.289652] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.289736] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_y", 10);\n'}
[1.289818] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.289899] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.289985] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.290072] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.290153] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.290236] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.290317] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.290404] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.290489] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.290573] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.290659] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.290742] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.290824] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.290907] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.290989] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.291072] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.291155] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.291236] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.291336] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.291424] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.291506] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.291591] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.291673] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.291755] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.291837] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.291917] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.291999] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.292086] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.292168] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.292254] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.292336] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.292416] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.292503] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.292586] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.292667] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.292744] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.292826] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.292932] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.293038] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.293125] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_z", 10);\n'}
[1.293209] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.293289] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.293370] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.293455] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.293538] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.293628] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.293711] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.293798] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.293885] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.293966] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.294051] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.294134] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.294217] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.294300] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.294397] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.294477] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.294560] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.294642] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.294722] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.294802] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.294881] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.294961] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.295039] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.295119] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.295198] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.295292] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.295377] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.295455] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.295533] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.295612] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.295689] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.295769] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.295850] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.295929] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.296006] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.296086] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.296166] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.296249] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.296332] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid ImuAdapter::AtMessageArival(sensor_msgs::msg::Imu_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.296412] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:59:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.296493] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageVelocityX\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.296572] (cubesat_sensors) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.296651] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.296741] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.296824] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.296903] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.297002] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:60:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.297122] (cubesat_sensors) StderrLine: {'line': b'       messageVelocityX\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->angular_velocity.x\n'}
[1.297207] (cubesat_sensors) StderrLine: {'line': b'                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.297290] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:64:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.297387] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageVelocityY\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.297487] (cubesat_sensors) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.297571] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.297656] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.297739] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.297823] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.297910] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:65:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.297995] (cubesat_sensors) StderrLine: {'line': b'       messageVelocityY\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->angular_velocity.y\n'}
[1.298076] (cubesat_sensors) StderrLine: {'line': b'                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.298158] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:69:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.298247] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageVelocityZ\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.298356] (cubesat_sensors) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.298442] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.298532] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.298613] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.298694] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.298780] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:70:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.298868] (cubesat_sensors) StderrLine: {'line': b'       messageVelocityZ\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->angular_velocity.z\n'}
[1.298950] (cubesat_sensors) StderrLine: {'line': b'                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.299031] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:74:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.299113] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationO\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.299195] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.299285] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.299373] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.299453] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.299533] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.299630] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:75:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.299715] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationO\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.w\n'}
[1.299812] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.299922] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:79:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.300033] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationX\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.300129] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.300222] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.300359] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.300483] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.300675] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.300856] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:80:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.301036] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationX\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.x\n'}
[1.301212] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.301405] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:84:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.301512] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationY\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.301599] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.301690] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.301780] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.301862] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.301944] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.302035] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:85:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.302121] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationY\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.y\n'}
[1.302204] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.302287] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:89:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.302386] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationZ\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.302466] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.302544] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.302623] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.302702] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.302781] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.302863] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:90:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.302944] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationZ\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.z\n'}
[1.303023] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.303760] (-) TimerEvent: {}
[1.403987] (-) TimerEvent: {}
[1.485807] (cubesat_sensors) StdoutLine: {'line': b"CMakeFiles/imu_adapter.dir/build.make:81: recipe for target 'CMakeFiles/imu_adapter.dir/src/imu_adapter.cpp.o' failed\n"}
[1.486212] (cubesat_sensors) StderrLine: {'line': b'make[2]: *** [CMakeFiles/imu_adapter.dir/src/imu_adapter.cpp.o] Error 1\n'}
[1.486470] (cubesat_sensors) StderrLine: {'line': b'make[1]: *** [CMakeFiles/imu_adapter.dir/all] Error 2\n'}
[1.486572] (cubesat_sensors) StdoutLine: {'line': b"CMakeFiles/Makefile2:95: recipe for target 'CMakeFiles/imu_adapter.dir/all' failed\n"}
[1.486672] (cubesat_sensors) StdoutLine: {'line': b"Makefile:159: recipe for target 'all' failed\n"}
[1.486764] (cubesat_sensors) StderrLine: {'line': b'make: *** [all] Error 2\n'}
[1.487726] (cubesat_sensors) CommandEnded: {'returncode': 2}
[1.504173] (-) TimerEvent: {}
[1.571646] (cubesat_sensors) JobEnded: {'identifier': 'cubesat_sensors', 'rc': 2}
[1.582649] (-) EventReactorShutdown: {}
