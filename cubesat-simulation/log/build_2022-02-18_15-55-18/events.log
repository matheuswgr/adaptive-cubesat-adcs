[0.000000] (-) TimerEvent: {}
[0.000177] (-) JobUnselected: {'identifier': 'cubesat_actuators'}
[0.000337] (-) JobUnselected: {'identifier': 'cubesat_controllers'}
[0.000405] (-) JobUnselected: {'identifier': 'cubesat_description'}
[0.000624] (-) JobUnselected: {'identifier': 'cubesat_gazebo'}
[0.000757] (-) JobUnselected: {'identifier': 'smartdata_test'}
[0.002471] (cubesat_sensors) JobQueued: {'identifier': 'cubesat_sensors', 'dependencies': OrderedDict()}
[0.002518] (cubesat_sensors) JobStarted: {'identifier': 'cubesat_sensors'}
[0.068399] (cubesat_sensors) JobProgress: {'identifier': 'cubesat_sensors', 'progress': 'cmake'}
[0.069304] (cubesat_sensors) JobProgress: {'identifier': 'cubesat_sensors', 'progress': 'build'}
[0.070377] (cubesat_sensors) Command: {'cmd': ['/usr/local/bin/cmake', '--build', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_sensors', '--', '-j8', '-l8'], 'cwd': '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_sensors', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'matheuswagner'), ('LANGUAGE', 'en'), ('LC_TIME', 'pt_BR.UTF-8'), ('TEXTDOMAIN', 'im-config'), ('OSPL_INFOFILE', '<stdout>'), ('XDG_SEAT', 'seat0'), ('SSH_AGENT_PID', '4234'), ('XDG_SESSION_TYPE', 'x11'), ('GIT_ASKPASS', '/snap/code/88/usr/share/code/resources/app/extensions/git/dist/askpass.sh'), ('LD_LIBRARY_PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/opt/yaml_cpp_vendor/lib:/home/matheuswagner/ros2_dashing/ros2-linux/opt/rviz_ogre_vendor/lib:/usr/lib:/home/matheuswagner/ros2_dashing/ros2-linux/lib:/usr/lib/x86_64-linux-gnu/gazebo-9/plugins:/opt/ros/dashing/opt/yaml_cpp_vendor/lib:/opt/rti.com/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0:/opt/ros/dashing/lib:/home/matheuswagner/Downloads/omnetpp-4.6-src/omnetpp-4.6/lib'), ('SHLVL', '1'), ('OLDPWD', '/home/matheuswagner/repos/adaptive-cubesat-adcs'), ('CHROME_DESKTOP', 'code-url-handler.desktop'), ('OSPL_URI', 'file:///home/matheuswagner/ros2_dashing/ros2-linux/share/opensplice_cmake_module/config/ros_ospl.xml'), ('QT4_IM_MODULE', 'xim'), ('HOME', '/home/matheuswagner'), ('DESKTOP_SESSION', 'ubuntu'), ('TERM_PROGRAM_VERSION', '1.64.2'), ('GIO_LAUNCHED_DESKTOP_FILE', '/var/lib/snapd/desktop/applications/code_code.desktop'), ('OSPL_VERBOSITY', '2'), ('NDDSHOME', '/opt/rti.com/rti_connext_dds-5.3.1'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL', 'true'), ('GTK_MODULES', 'gail:atk-bridge'), ('VSCODE_GIT_ASKPASS_MAIN', '/snap/code/88/usr/share/code/resources/app/extensions/git/dist/askpass-main.js'), ('ROS_PYTHON_VERSION', '3'), ('LC_MONETARY', 'pt_BR.UTF-8'), ('LC_CTYPE', 'pt_BR.UTF-8'), ('VSCODE_GIT_ASKPASS_NODE', '/snap/code/88/usr/share/code/code'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('OSPL_TMPL_PATH', '/usr/etc/opensplice/idlpp'), ('COLORTERM', 'truecolor'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5791'), ('MANDATORY_PATH', '/usr/share/gconf/ubuntu.mandatory.path'), ('COLCON_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install:/home/matheuswagner/ros2_dashing/ros2-linux'), ('IM_CONFIG_PHASE', '2'), ('ROS_DISTRO', 'dashing'), ('LOGNAME', 'matheuswagner'), ('GTK_IM_MODULE', 'ibus'), ('_', '/home/matheuswagner/.local/bin/colcon'), ('DEFAULTS_PATH', '/usr/share/gconf/ubuntu.default.path'), ('ROS_VERSION', '2'), ('PKG_CONFIG_PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/lib/x86_64-linux-gnu/pkgconfig:/home/matheuswagner/ros2_dashing/ros2-linux/lib/pkgconfig'), ('USERNAME', 'matheuswagner'), ('XDG_SESSION_ID', '2'), ('TERM', 'xterm-256color'), ('OSPL_ERRORFILE', '<stderr>'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('WINDOWPATH', '2'), ('PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/bin:/opt/rti.com/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0:/opt/rti.com/rti_connext_dds-5.3.1/bin:/opt/ros/dashing/bin:/home/matheuswagner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/matheuswagner/Downloads/omnetpp-4.6-src/omnetpp-4.6/bin'), ('PAPERSIZE', 'a4'), ('SESSION_MANAGER', 'local/matheuswagner-Inspiron-7572:@/tmp/.ICE-unix/4156,unix/matheuswagner-Inspiron-7572:/tmp/.ICE-unix/4156'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'pt_BR.UTF-8'), ('BAMF_DESKTOP_FILE_HINT', '/var/lib/snapd/desktop/applications/code_code.desktop'), ('GDK_BACKEND', 'x11'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('OSPL_HOME', '/usr'), ('XDG_CURRENT_DESKTOP', 'Unity'), ('LC_TELEPHONE', 'pt_BR.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('TERM_PROGRAM', 'vscode'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XMODIFIERS', '@im=ibus'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-c7856e65b5.sock'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('AMENT_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/smartdata_test:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_gazebo:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_controller:/home/matheuswagner/ros2_dashing/ros2-linux:/opt/ros/dashing'), ('ORIGINAL_XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('GSETTINGS_SCHEMA_DIR', '/snap/code/88/usr/share/glib-2.0/schemas'), ('DISABLE_WAYLAND', '1'), ('LC_NAME', 'pt_BR.UTF-8'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'pt_BR.UTF-8'), ('TEXTDOMAINDIR', '/usr/share/locale/'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('LC_IDENTIFICATION', 'pt_BR.UTF-8'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', '--ms-enable-electron-run-as-node'), ('XDG_VTNR', '2'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_sensors'), ('CLUTTER_IM_MODULE', 'xim'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('LC_NUMERIC', 'pt_BR.UTF-8'), ('PYTHONPATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description/lib/python3.6/site-packages:/home/matheuswagner/ros2_dashing/ros2-linux/lib/python3.6/site-packages:/opt/ros/dashing/lib/python3.6/site-packages'), ('LC_PAPER', 'pt_BR.UTF-8'), ('BREAKPAD_DUMP_LOCATION', '/home/matheuswagner/.config/Code/exthost Crash Reports'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/smartdata_test:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_gazebo:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_controller:/home/matheuswagner/ros2_dashing/ros2-linux:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description:/opt/ros/dashing')]), 'shell': False}
[0.100051] (-) TimerEvent: {}
[0.101542] (cubesat_sensors) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target imu_adapter\x1b[0m\n'}
[0.114542] (cubesat_sensors) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/imu_adapter.dir/src/imu_adapter.cpp.o\x1b[0m\n'}
[0.200095] (-) TimerEvent: {}
[0.300573] (-) TimerEvent: {}
[0.401015] (-) TimerEvent: {}
[0.501397] (-) TimerEvent: {}
[0.601844] (-) TimerEvent: {}
[0.702178] (-) TimerEvent: {}
[0.802521] (-) TimerEvent: {}
[0.902843] (-) TimerEvent: {}
[1.003198] (-) TimerEvent: {}
[1.103530] (-) TimerEvent: {}
[1.203898] (-) TimerEvent: {}
[1.223177] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::ImuAdapter()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.223463] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:21:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.223610] (cubesat_sensors) StderrLine: {'line': b'       subcription = this->create_subscription<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>(\n'}
[1.223724] (cubesat_sensors) StderrLine: {'line': b'                                                              \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.224028] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:21:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.224669] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:22:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K_1\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[1.224800] (cubesat_sensors) StderrLine: {'line': b'       "imu_plugin/out", 10, std::bind(&ImuAdapter::AtMessageArival, this, \x1b[01;31m\x1b[K_1\x1b[m\x1b[K));\n'}
[1.224905] (cubesat_sensors) StderrLine: {'line': b'                                                                           \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.225026] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:22:75:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Ksuggested alternative:\n'}
[1.226101] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:2:0\x1b[m\x1b[K:\n'}
[1.226922] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/functional:275:34:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::placeholders::_1\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.227098] (cubesat_sensors) StderrLine: {'line': b'     extern const _Placeholder<1> \x1b[01;36m\x1b[K_1\x1b[m\x1b[K;\n'}
[1.227266] (cubesat_sensors) StderrLine: {'line': b'                                  \x1b[01;36m\x1b[K^~\x1b[m\x1b[K\n'}
[1.227424] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.227595] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_velocity_x", 10);\n'}
[1.227750] (cubesat_sensors) StderrLine: {'line': b'                                                                  \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.227902] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.228056] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [15], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.228229] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.228379] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.228522] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.228664] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.228804] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.228945] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.229097] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.229256] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.229402] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.229549] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.229708] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.229861] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.230010] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.230160] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.230314] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.230460] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.230604] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.230750] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.230903] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.231044] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.231187] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.231331] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.231472] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.231610] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.231753] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.231895] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.232043] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.232191] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.232351] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.232497] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.232640] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.232784] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.232923] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:24:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.233069] (cubesat_sensors) StderrLine: {'line': b'       velocityXPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.233224] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.233366] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.233512] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_velocity_y", 10);\n'}
[1.233653] (cubesat_sensors) StderrLine: {'line': b'                                                                  \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.233788] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.233904] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [15], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.234033] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.234156] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.234290] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.234428] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.234567] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.234706] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.234849] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.235001] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.235142] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.235279] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.235417] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.235560] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.235714] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.235857] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.235998] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.236146] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.236304] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.236450] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.236594] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.236735] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.236883] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.237124] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.237520] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.237959] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.238308] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.238479] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.238627] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.238813] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.238966] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.239112] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.239241] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.239361] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.239481] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:25:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.239596] (cubesat_sensors) StderrLine: {'line': b'       velocityYPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.239710] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.239826] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.239968] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_velocity_z", 10);\n'}
[1.240099] (cubesat_sensors) StderrLine: {'line': b'                                                                  \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.240258] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.240384] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [15], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.240492] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.240617] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.240721] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.240833] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.240954] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.241088] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.241212] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.241344] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.241456] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.241545] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.241645] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.241721] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.241795] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.241869] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.241945] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.242054] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.242145] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.242236] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.242339] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.242455] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.242600] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.242719] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.242822] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.242944] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.243071] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.243174] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.243298] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.243415] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.243516] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.243671] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.243779] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.243875] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.243985] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:26:94:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.244113] (cubesat_sensors) StderrLine: {'line': b'       velocityZPublisher = this->create_publisher<std_msgs::msg::String>("imu_velocity_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.244285] (cubesat_sensors) StderrLine: {'line': b'                                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.244411] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.244507] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_o", 10);\n'}
[1.244584] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.244658] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.244737] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.244815] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.244889] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.244964] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.245038] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.245111] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.245186] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.245273] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.245360] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.245433] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.245504] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.245575] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.245652] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.245725] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.245796] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.245868] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.245939] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.246009] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.246081] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.246154] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.246245] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.246343] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.246444] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.246520] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.246592] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.246670] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.246744] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.246819] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.246893] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.246980] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.247087] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.247162] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.247235] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.247308] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:28:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.247382] (cubesat_sensors) StderrLine: {'line': b'       orientationOPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_o", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.247454] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.247525] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.247599] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_x", 10);\n'}
[1.247677] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.247753] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.247826] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.247901] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.247971] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.248042] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.248114] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.248201] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.248274] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.248350] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.248426] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.248498] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.248568] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.248641] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.248743] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.248825] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.248919] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.248988] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.249055] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.249123] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.249191] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.249260] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.249326] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.249391] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.249487] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.249613] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.249733] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.249859] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.249987] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.250114] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.250236] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.250369] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.250453] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.250527] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.250600] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.250692] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:29:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.250773] (cubesat_sensors) StderrLine: {'line': b'       orientationXPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_x", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.250847] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.250917] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.250987] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_y", 10);\n'}
[1.251056] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.251127] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.251224] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.251304] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.251381] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.251456] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.251537] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.251613] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.251689] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.251765] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.251844] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.251919] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.251995] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.252071] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.252157] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.252271] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.252402] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.252482] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.252564] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.252642] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.252718] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.252796] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.252872] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.252948] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.253025] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.253102] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.253182] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.253256] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.253331] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.253411] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.253487] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.253563] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.253646] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.253721] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.253796] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.253872] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:30:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.253949] (cubesat_sensors) StderrLine: {'line': b'       orientationYPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_y", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.254024] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.254128] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.254220] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::\x1b[01;31m\x1b[KString\x1b[m\x1b[K>("imu_orientation_z", 10);\n'}
[1.254297] (cubesat_sensors) StderrLine: {'line': b'                                                                     \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[1.254378] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KString\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.254456] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::create_publisher<<expression error> >(const char [18], int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.254535] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.254618] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.254695] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.254773] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.254848] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.254928] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.255004] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)\n'}
[1.255085] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.255160] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.255235] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:177:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.255309] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.255386] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.255467] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.255548] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.255622] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.255695] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.255768] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.255845] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, size_t, std::shared_ptr<_Up>)\n'}
[1.255924] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.256001] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.256074] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:198:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.256164] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.256248] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.256321] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.256398] (cubesat_sensors) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors/single_threaded_executor.hpp:28:0\x1b[m\x1b[K,\n'}
[1.256474] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.256550] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144\x1b[m\x1b[K,\n'}
[1.256625] (cubesat_sensors) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:6\x1b[m\x1b[K:\n'}
[1.256702] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: template<class MessageT, class AllocatorT, class PublisherT> std::shared_ptr<PublisherT> rclcpp::Node::create_publisher(const string&, const rmw_qos_profile_t&, std::shared_ptr<_Up>)\n'}
[1.256781] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[Kcreate_publisher\x1b[m\x1b[K(\n'}
[1.256857] (cubesat_sensors) StderrLine: {'line': b'   \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.256933] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/node.hpp:217:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.257007] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:31:100:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.257084] (cubesat_sensors) StderrLine: {'line': b'       orientationZPublisher = this->create_publisher<std_msgs::msg::String>("imu_orientation_z", 10\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.257165] (cubesat_sensors) StderrLine: {'line': b'                                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.257246] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid ImuAdapter::AtMessageArival(sensor_msgs::msg::Imu_<std::allocator<void> >::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.257327] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:59:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.257409] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageVelocityX\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.257485] (cubesat_sensors) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.257561] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.257645] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.257721] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.257796] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.257880] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:60:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.257958] (cubesat_sensors) StderrLine: {'line': b'       messageVelocityX\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->angular_velocity.x\n'}
[1.258034] (cubesat_sensors) StderrLine: {'line': b'                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.258109] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:64:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.258186] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageVelocityY\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.258262] (cubesat_sensors) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.258338] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.258415] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.258491] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.258568] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.258671] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:65:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.258752] (cubesat_sensors) StderrLine: {'line': b'       messageVelocityY\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->angular_velocity.y\n'}
[1.258828] (cubesat_sensors) StderrLine: {'line': b'                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.258909] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:69:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.258988] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageVelocityZ\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.259063] (cubesat_sensors) StderrLine: {'line': b'                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.259138] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.259222] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.259298] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.259374] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.259454] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:70:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.259535] (cubesat_sensors) StderrLine: {'line': b'       messageVelocityZ\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->angular_velocity.z\n'}
[1.259611] (cubesat_sensors) StderrLine: {'line': b'                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.259686] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:74:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.259764] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationO\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.259840] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.259915] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.259991] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.260065] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.260140] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.260248] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:75:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.260328] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationO\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.w\n'}
[1.260403] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.260478] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:79:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.260556] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationX\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.260631] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.260706] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.260783] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.260858] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.260933] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.261011] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:80:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.261094] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationX\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.x\n'}
[1.261174] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.261249] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:84:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.261328] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationY\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.261407] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.261482] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.261562] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.261637] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.261712] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.261796] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:85:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.261875] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationY\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.y\n'}
[1.261949] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.262022] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:89:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray_<std::allocator<void> >&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262103] (cubesat_sensors) StderrLine: {'line': b'       this->BuildEmptyPacket(messageOrientationZ\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.262178] (cubesat_sensors) StderrLine: {'line': b'                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.262253] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void ImuAdapter::BuildEmptyPacket(std_msgs::msg::Float32MultiArray*)\n'}
[1.262329] (cubesat_sensors) StderrLine: {'line': b'     void \x1b[01;36m\x1b[KBuildEmptyPacket\x1b[m\x1b[K(std_msgs::msg::Float32MultiArray *message)\n'}
[1.262405] (cubesat_sensors) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.262479] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:35:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray* {aka std_msgs::msg::Float32MultiArray_<std::allocator<void> >*}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262558] (cubesat_sensors) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_sensors/src/imu_adapter.cpp:90:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kbase operand of \xe2\x80\x98\x1b[01m\x1b[K->\x1b[m\x1b[K\xe2\x80\x99 has non-pointer type \xe2\x80\x98\x1b[01m\x1b[Kstd_msgs::msg::Float32MultiArray_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262636] (cubesat_sensors) StderrLine: {'line': b'       messageOrientationZ\x1b[01;31m\x1b[K->\x1b[m\x1b[Kdata[6] = msg->orientation.z\n'}
[1.262716] (cubesat_sensors) StderrLine: {'line': b'                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[1.304040] (-) TimerEvent: {}
[1.404329] (-) TimerEvent: {}
[1.442962] (cubesat_sensors) StdoutLine: {'line': b"CMakeFiles/imu_adapter.dir/build.make:81: recipe for target 'CMakeFiles/imu_adapter.dir/src/imu_adapter.cpp.o' failed\n"}
[1.443321] (cubesat_sensors) StderrLine: {'line': b'make[2]: *** [CMakeFiles/imu_adapter.dir/src/imu_adapter.cpp.o] Error 1\n'}
[1.443466] (cubesat_sensors) StdoutLine: {'line': b"CMakeFiles/Makefile2:95: recipe for target 'CMakeFiles/imu_adapter.dir/all' failed\n"}
[1.443579] (cubesat_sensors) StderrLine: {'line': b'make[1]: *** [CMakeFiles/imu_adapter.dir/all] Error 2\n'}
[1.443683] (cubesat_sensors) StdoutLine: {'line': b"Makefile:159: recipe for target 'all' failed\n"}
[1.443787] (cubesat_sensors) StderrLine: {'line': b'make: *** [all] Error 2\n'}
[1.444787] (cubesat_sensors) CommandEnded: {'returncode': 2}
[1.504588] (-) TimerEvent: {}
[1.525855] (cubesat_sensors) JobEnded: {'identifier': 'cubesat_sensors', 'rc': 2}
[1.536610] (-) EventReactorShutdown: {}
