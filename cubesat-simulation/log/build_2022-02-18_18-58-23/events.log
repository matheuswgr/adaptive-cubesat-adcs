[0.000000] (-) TimerEvent: {}
[0.003511] (-) JobUnselected: {'identifier': 'cubesat_actuators'}
[0.003553] (-) JobUnselected: {'identifier': 'cubesat_description'}
[0.008188] (-) JobUnselected: {'identifier': 'cubesat_gazebo'}
[0.008350] (-) JobUnselected: {'identifier': 'cubesat_sensors'}
[0.008422] (-) JobUnselected: {'identifier': 'smartdata_test'}
[0.008471] (cubesat_controllers) JobQueued: {'identifier': 'cubesat_controllers', 'dependencies': OrderedDict()}
[0.008542] (cubesat_controllers) JobStarted: {'identifier': 'cubesat_controllers'}
[0.063479] (cubesat_controllers) JobProgress: {'identifier': 'cubesat_controllers', 'progress': 'cmake'}
[0.064184] (cubesat_controllers) JobProgress: {'identifier': 'cubesat_controllers', 'progress': 'build'}
[0.064814] (cubesat_controllers) Command: {'cmd': ['/usr/local/bin/cmake', '--build', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_controllers', '--', '-j8', '-l8'], 'cwd': '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_controllers', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'matheuswagner'), ('LANGUAGE', 'en'), ('LC_TIME', 'pt_BR.UTF-8'), ('TEXTDOMAIN', 'im-config'), ('OSPL_INFOFILE', '<stdout>'), ('XDG_SEAT', 'seat0'), ('SSH_AGENT_PID', '3033'), ('XDG_SESSION_TYPE', 'x11'), ('LD_LIBRARY_PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/opt/yaml_cpp_vendor/lib:/home/matheuswagner/ros2_dashing/ros2-linux/opt/rviz_ogre_vendor/lib:/usr/lib:/home/matheuswagner/ros2_dashing/ros2-linux/lib:/usr/lib/x86_64-linux-gnu/gazebo-9/plugins:/opt/ros/dashing/opt/yaml_cpp_vendor/lib:/opt/rti.com/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0:/opt/ros/dashing/lib:/home/matheuswagner/Downloads/omnetpp-4.6-src/omnetpp-4.6/lib'), ('SHLVL', '1'), ('CHROME_DESKTOP', 'code-url-handler.desktop'), ('OSPL_URI', 'file:///home/matheuswagner/ros2_dashing/ros2-linux/share/opensplice_cmake_module/config/ros_ospl.xml'), ('QT4_IM_MODULE', 'xim'), ('HOME', '/home/matheuswagner'), ('DESKTOP_SESSION', 'ubuntu'), ('TERM_PROGRAM_VERSION', '1.64.2'), ('GIO_LAUNCHED_DESKTOP_FILE', '/var/lib/snapd/desktop/applications/code_code.desktop'), ('OSPL_VERBOSITY', '2'), ('NDDSHOME', '/opt/rti.com/rti_connext_dds-5.3.1'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL', 'true'), ('GTK_MODULES', 'gail:atk-bridge'), ('ROS_PYTHON_VERSION', '3'), ('LC_MONETARY', 'pt_BR.UTF-8'), ('LC_CTYPE', 'pt_BR.UTF-8'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('OSPL_TMPL_PATH', '/usr/etc/opensplice/idlpp'), ('COLORTERM', 'truecolor'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '3492'), ('MANDATORY_PATH', '/usr/share/gconf/ubuntu.mandatory.path'), ('COLCON_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install:/home/matheuswagner/ros2_dashing/ros2-linux'), ('IM_CONFIG_PHASE', '2'), ('ROS_DISTRO', 'dashing'), ('LOGNAME', 'matheuswagner'), ('GTK_IM_MODULE', 'ibus'), ('_', '/home/matheuswagner/.local/bin/colcon'), ('DEFAULTS_PATH', '/usr/share/gconf/ubuntu.default.path'), ('ROS_VERSION', '2'), ('PKG_CONFIG_PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/lib/x86_64-linux-gnu/pkgconfig:/home/matheuswagner/ros2_dashing/ros2-linux/lib/pkgconfig'), ('USERNAME', 'matheuswagner'), ('XDG_SESSION_ID', '2'), ('TERM', 'xterm-256color'), ('OSPL_ERRORFILE', '<stderr>'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('WINDOWPATH', '2'), ('PATH', '/home/matheuswagner/ros2_dashing/ros2-linux/bin:/opt/rti.com/rti_connext_dds-5.3.1/lib/x64Linux3gcc5.4.0:/opt/rti.com/rti_connext_dds-5.3.1/bin:/opt/ros/dashing/bin:/home/matheuswagner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/matheuswagner/Downloads/omnetpp-4.6-src/omnetpp-4.6/bin'), ('PAPERSIZE', 'a4'), ('SESSION_MANAGER', 'local/matheuswagner-Inspiron-7572:@/tmp/.ICE-unix/2955,unix/matheuswagner-Inspiron-7572:/tmp/.ICE-unix/2955'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'pt_BR.UTF-8'), ('BAMF_DESKTOP_FILE_HINT', '/var/lib/snapd/desktop/applications/code_code.desktop'), ('GDK_BACKEND', 'x11'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('OSPL_HOME', '/usr'), ('XDG_CURRENT_DESKTOP', 'Unity'), ('LC_TELEPHONE', 'pt_BR.UTF-8'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('TERM_PROGRAM', 'vscode'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XMODIFIERS', '@im=ibus'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('AMENT_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/smartdata_test:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_sensors:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_gazebo:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_controller:/home/matheuswagner/ros2_dashing/ros2-linux:/opt/ros/dashing'), ('ORIGINAL_XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('GSETTINGS_SCHEMA_DIR', '/snap/code/88/usr/share/glib-2.0/schemas'), ('DISABLE_WAYLAND', '1'), ('LC_NAME', 'pt_BR.UTF-8'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'pt_BR.UTF-8'), ('TEXTDOMAINDIR', '/usr/share/locale/'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('LC_IDENTIFICATION', 'pt_BR.UTF-8'), ('XDG_VTNR', '2'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/build/cubesat_controllers'), ('CLUTTER_IM_MODULE', 'xim'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('LC_NUMERIC', 'pt_BR.UTF-8'), ('PYTHONPATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description/lib/python3.6/site-packages:/home/matheuswagner/ros2_dashing/ros2-linux/lib/python3.6/site-packages:/opt/ros/dashing/lib/python3.6/site-packages'), ('LC_PAPER', 'pt_BR.UTF-8'), ('BREAKPAD_DUMP_LOCATION', '/home/matheuswagner/.config/Code/exthost Crash Reports'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/smartdata_test:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_sensors:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_gazebo:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_controller:/home/matheuswagner/ros2_dashing/ros2-linux:/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/install/cubesat_description:/opt/ros/dashing')]), 'shell': False}
[0.091261] (cubesat_controllers) StdoutLine: {'line': b'\x1b[35m\x1b[1mScanning dependencies of target controller_sd\x1b[0m\n'}
[0.099476] (-) TimerEvent: {}
[0.102104] (cubesat_controllers) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/controller_sd.dir/src/controller_sd.cpp.o\x1b[0m\n'}
[0.199625] (-) TimerEvent: {}
[0.299959] (-) TimerEvent: {}
[0.400242] (-) TimerEvent: {}
[0.500543] (-) TimerEvent: {}
[0.600857] (-) TimerEvent: {}
[0.701189] (-) TimerEvent: {}
[0.801517] (-) TimerEvent: {}
[0.901843] (-) TimerEvent: {}
[1.002166] (-) TimerEvent: {}
[1.102519] (-) TimerEvent: {}
[1.140962] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:\x1b[m\x1b[K In function \xe2\x80\x98\x1b[01m\x1b[Kint main(int, char**)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.141363] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:79:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kconflicting declaration \xe2\x80\x98\x1b[01m\x1b[Kauto frameOrientation\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.141495] (cubesat_controllers) StderrLine: {'line': b'     auto \x1b[01;31m\x1b[KframeOrientation\x1b[m\x1b[K= std::make_shared<RemoteSmartData<Dummy_Transducer<1,float>,float>>(new Region(0.0,0.0,0.0,0.0,0,0),2,2,"orientation_x",new Coordinates(0,0,0),"imu_orientation_x","sensor");\n'}
[1.141620] (cubesat_controllers) StderrLine: {'line': b'          \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.141725] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:78:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kprevious declaration as \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<RemoteSmartData<Dummy_Transducer<1, float>, float> > frameOrientation\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.141833] (cubesat_controllers) StderrLine: {'line': b'     auto \x1b[01;36m\x1b[KframeOrientation\x1b[m\x1b[K= std::make_shared<RemoteSmartData<Dummy_Transducer<1,float>,float>>(new Region(0.0,0.0,0.0,0.0,0,0),2,2,"orientation_o",new Coordinates(0,0,0),"imu_orientation_o","sensor");\n'}
[1.141939] (cubesat_controllers) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.142040] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:80:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kconflicting declaration \xe2\x80\x98\x1b[01m\x1b[Kauto frameOrientation\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.142143] (cubesat_controllers) StderrLine: {'line': b'     auto \x1b[01;31m\x1b[KframeOrientation\x1b[m\x1b[K= std::make_shared<RemoteSmartData<Dummy_Transducer<1,float>,float>>(new Region(0.0,0.0,0.0,0.0,0,0),2,2,"orientation_y",new Coordinates(0,0,0),"imu_orientation_y","sensor");\n'}
[1.142246] (cubesat_controllers) StderrLine: {'line': b'          \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.142346] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:78:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kprevious declaration as \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<RemoteSmartData<Dummy_Transducer<1, float>, float> > frameOrientation\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.142450] (cubesat_controllers) StderrLine: {'line': b'     auto \x1b[01;36m\x1b[KframeOrientation\x1b[m\x1b[K= std::make_shared<RemoteSmartData<Dummy_Transducer<1,float>,float>>(new Region(0.0,0.0,0.0,0.0,0,0),2,2,"orientation_o",new Coordinates(0,0,0),"imu_orientation_o","sensor");\n'}
[1.142571] (cubesat_controllers) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.142673] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:81:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kconflicting declaration \xe2\x80\x98\x1b[01m\x1b[Kauto frameOrientation\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.142773] (cubesat_controllers) StderrLine: {'line': b'     auto \x1b[01;31m\x1b[KframeOrientation\x1b[m\x1b[K= std::make_shared<RemoteSmartData<Dummy_Transducer<1,float>,float>>(new Region(0.0,0.0,0.0,0.0,0,0),2,2,"orientation_z",new Coordinates(0,0,0),"imu_orientation_z","sensor");\n'}
[1.142872] (cubesat_controllers) StderrLine: {'line': b'          \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.142969] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:78:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kprevious declaration as \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<RemoteSmartData<Dummy_Transducer<1, float>, float> > frameOrientation\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.143071] (cubesat_controllers) StderrLine: {'line': b'     auto \x1b[01;36m\x1b[KframeOrientation\x1b[m\x1b[K= std::make_shared<RemoteSmartData<Dummy_Transducer<1,float>,float>>(new Region(0.0,0.0,0.0,0.0,0,0),2,2,"orientation_o",new Coordinates(0,0,0),"imu_orientation_o","sensor");\n'}
[1.143170] (cubesat_controllers) StderrLine: {'line': b'          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.154710] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:113:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kspin_some(std::__cxx11::list<std::shared_ptr<SmartData> >::iterator&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.154943] (cubesat_controllers) StderrLine: {'line': b'             rclcpp::spin_some(it\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.155146] (cubesat_controllers) StderrLine: {'line': b'                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.155237] (cubesat_controllers) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144:0\x1b[m\x1b[K,\n'}
[1.155325] (cubesat_controllers) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/../../../include/transformerSmartdata.h:7\x1b[m\x1b[K,\n'}
[1.155424] (cubesat_controllers) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/../../../include/responsiveSmartdata.h:5\x1b[m\x1b[K,\n'}
[1.155512] (cubesat_controllers) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:1\x1b[m\x1b[K:\n'}
[1.155598] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:34:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void rclcpp::spin_some(rclcpp::node_interfaces::NodeBaseInterface::SharedPtr)\n'}
[1.155682] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[Kspin_some\x1b[m\x1b[K(rclcpp::node_interfaces::NodeBaseInterface::SharedPtr node_ptr);\n'}
[1.155763] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[1.155846] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:34:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::__cxx11::list<std::shared_ptr<SmartData> >::iterator {aka std::_List_iterator<std::shared_ptr<SmartData> >}\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::node_interfaces::NodeBaseInterface::SharedPtr {aka std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.155969] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:38:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void rclcpp::spin_some(rclcpp::Node::SharedPtr)\n'}
[1.156100] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[Kspin_some\x1b[m\x1b[K(rclcpp::Node::SharedPtr node_ptr);\n'}
[1.156201] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[1.156297] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:38:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::__cxx11::list<std::shared_ptr<SmartData> >::iterator {aka std::_List_iterator<std::shared_ptr<SmartData> >}\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::SharedPtr {aka std::shared_ptr<rclcpp::Node>}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.160252] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:120:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kspin_some(std::shared_ptr<SmartData>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.160397] (cubesat_controllers) StderrLine: {'line': b'             rclcpp::spin_some(*it\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[1.160585] (cubesat_controllers) StderrLine: {'line': b'                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.160693] (cubesat_controllers) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/rclcpp.hpp:144:0\x1b[m\x1b[K,\n'}
[1.160794] (cubesat_controllers) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/../../../include/transformerSmartdata.h:7\x1b[m\x1b[K,\n'}
[1.160895] (cubesat_controllers) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/../../../include/responsiveSmartdata.h:5\x1b[m\x1b[K,\n'}
[1.160995] (cubesat_controllers) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:1\x1b[m\x1b[K:\n'}
[1.161088] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:34:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void rclcpp::spin_some(rclcpp::node_interfaces::NodeBaseInterface::SharedPtr)\n'}
[1.161182] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[Kspin_some\x1b[m\x1b[K(rclcpp::node_interfaces::NodeBaseInterface::SharedPtr node_ptr);\n'}
[1.161281] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[1.161388] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:34:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SmartData>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::node_interfaces::NodeBaseInterface::SharedPtr {aka std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.161500] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:38:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: void rclcpp::spin_some(rclcpp::Node::SharedPtr)\n'}
[1.161605] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[Kspin_some\x1b[m\x1b[K(rclcpp::Node::SharedPtr node_ptr);\n'}
[1.161704] (cubesat_controllers) StderrLine: {'line': b' \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[1.161804] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/ros2_dashing/ros2-linux/include/rclcpp/executors.hpp:38:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<SmartData>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Node::SharedPtr {aka std::shared_ptr<rclcpp::Node>}\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.202650] (-) TimerEvent: {}
[1.302983] (-) TimerEvent: {}
[1.319531] (cubesat_controllers) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:2:0\x1b[m\x1b[K:\n'}
[1.319913] (cubesat_controllers) StderrLine: {'line': b'/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/../../../include/remoteSmartdata.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[KRemoteSmartData<Transducer, Value>::RemoteSmartData(Region*, int, int, std::__cxx11::string, Coordinates*, std::__cxx11::string, std::__cxx11::string) [with Transducer = Dummy_Transducer<1, float>; Value = float; std::__cxx11::string = std::__cxx11::basic_string<char>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.320075] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/ext/new_allocator.h:136:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = RemoteSmartData<Dummy_Transducer<1, float>, float>; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}; _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.320298] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/alloc_traits.h:475:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = RemoteSmartData<Dummy_Transducer<1, float>, float>; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}; _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<RemoteSmartData<Dummy_Transducer<1, float>, float> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.320421] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/shared_ptr_base.h:526:39:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}; _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>; _Alloc = std::allocator<RemoteSmartData<Dummy_Transducer<1, float>, float> >; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.320537] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/shared_ptr_base.h:637:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_count<_Lp>::__shared_count(std::_Sp_make_shared_tag, _Tp*, const _Alloc&, _Args&& ...) [with _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>; _Alloc = std::allocator<RemoteSmartData<Dummy_Transducer<1, float>, float> >; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.320648] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/shared_ptr_base.h:1295:35:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_make_shared_tag, const _Alloc&, _Args&& ...) [with _Alloc = std::allocator<RemoteSmartData<Dummy_Transducer<1, float>, float> >; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}; _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.320777] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/shared_ptr.h:344:64:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>::shared_ptr(std::_Sp_make_shared_tag, const _Alloc&, _Args&& ...) [with _Alloc = std::allocator<RemoteSmartData<Dummy_Transducer<1, float>, float> >; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}; _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.320907] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/shared_ptr.h:690:14:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>; _Alloc = std::allocator<RemoteSmartData<Dummy_Transducer<1, float>, float> >; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.321017] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/7/bits/shared_ptr.h:706:39:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> std::make_shared(_Args&& ...) [with _Tp = RemoteSmartData<Dummy_Transducer<1, float>, float>; _Args = {Region*, int, int, const char (&)[17], Coordinates*, const char (&)[34], const char (&)[7]}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.321133] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:66:215:\x1b[m\x1b[K   required from here\n'}
[1.321229] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/../../../include/remoteSmartdata.h:42:32:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KDummy_Transducer<1, float>::Dummy_Transducer(RemoteSmartData<Dummy_Transducer<1, float>, float>*)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.321309] (cubesat_controllers) StderrLine: {'line': b'             this->transducer = \x1b[01;31m\x1b[Knew Transducer(this)\x1b[m\x1b[K;\n'}
[1.321398] (cubesat_controllers) StderrLine: {'line': b'                                \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.321522] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:18:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: Dummy_Transducer<UNIT, Value>::Dummy_Transducer() [with long unsigned int UNIT = 1; Value = float]\n'}
[1.321617] (cubesat_controllers) StderrLine: {'line': b'     \x1b[01;36m\x1b[KDummy_Transducer\x1b[m\x1b[K(){}\n'}
[1.321724] (cubesat_controllers) StderrLine: {'line': b'     \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.321829] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:18:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[1.321947] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:11:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: constexpr Dummy_Transducer<1, float>::Dummy_Transducer(const Dummy_Transducer<1, float>&)\n'}
[1.322060] (cubesat_controllers) StderrLine: {'line': b' class \x1b[01;36m\x1b[KDummy_Transducer\x1b[m\x1b[K: public Transducer<UNIT,Value>\n'}
[1.322166] (cubesat_controllers) StderrLine: {'line': b'       \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.322273] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:11:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[KRemoteSmartData<Dummy_Transducer<1, float>, float>*\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst Dummy_Transducer<1, float>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.322378] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:11:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: constexpr Dummy_Transducer<1, float>::Dummy_Transducer(Dummy_Transducer<1, float>&&)\n'}
[1.322489] (cubesat_controllers) StderrLine: {'line': b'\x1b[01m\x1b[K/home/matheuswagner/repos/adaptive-cubesat-adcs/cubesat-simulation/src/cubesat_controllers/src/controller_sd.cpp:11:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[KRemoteSmartData<Dummy_Transducer<1, float>, float>*\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[KDummy_Transducer<1, float>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.403118] (-) TimerEvent: {}
[1.461736] (cubesat_controllers) StdoutLine: {'line': b"CMakeFiles/controller_sd.dir/build.make:81: recipe for target 'CMakeFiles/controller_sd.dir/src/controller_sd.cpp.o' failed\n"}
[1.462065] (cubesat_controllers) StderrLine: {'line': b'make[2]: *** [CMakeFiles/controller_sd.dir/src/controller_sd.cpp.o] Error 1\n'}
[1.462376] (cubesat_controllers) StderrLine: {'line': b'make[1]: *** [CMakeFiles/controller_sd.dir/all] Error 2\n'}
[1.462497] (cubesat_controllers) StderrLine: {'line': b'make: *** [all] Error 2\n'}
[1.462590] (cubesat_controllers) StdoutLine: {'line': b"CMakeFiles/Makefile2:95: recipe for target 'CMakeFiles/controller_sd.dir/all' failed\n"}
[1.462680] (cubesat_controllers) StdoutLine: {'line': b"Makefile:159: recipe for target 'all' failed\n"}
[1.463465] (cubesat_controllers) CommandEnded: {'returncode': 2}
[1.505505] (-) TimerEvent: {}
[1.542262] (cubesat_controllers) JobEnded: {'identifier': 'cubesat_controllers', 'rc': 2}
[1.553277] (-) EventReactorShutdown: {}
